/**
 * Test data flow in the application
 * This will help identify where the data is getting lost
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üß™ Testing ZeamiTerm data flow...\n');

// Launch the app with test environment
const electronPath = require('electron');
const appPath = path.join(__dirname, '..');

const appProcess = spawn(electronPath, [appPath], {
  env: { 
    ...process.env, 
    NODE_ENV: 'development',
    ELECTRON_ENABLE_LOGGING: '1'
  },
  stdio: ['pipe', 'pipe', 'pipe']
});

let outputBuffer = '';
let errorBuffer = '';

// Capture all output
appProcess.stdout.on('data', (data) => {
  const output = data.toString();
  outputBuffer += output;
  
  // Log specific events
  if (output.includes('[PtyService]')) {
    console.log('üîµ PtyService:', output.trim());
  }
  if (output.includes('[WorkingPty]')) {
    console.log('üü¢ WorkingPty:', output.trim());
  }
  if (output.includes('[Main]')) {
    console.log('üü† Main:', output.trim());
  }
  if (output.includes('[Renderer]')) {
    console.log('üü£ Renderer:', output.trim());
  }
  if (output.includes('[DataBufferer]')) {
    console.log('üü° DataBufferer:', output.trim());
  }
  if (output.includes('[Preload]')) {
    console.log('üî¥ Preload:', output.trim());
  }
});

appProcess.stderr.on('data', (data) => {
  const error = data.toString();
  errorBuffer += error;
  
  // Ignore known warnings
  if (!error.includes('Electron Security Warning') && 
      !error.includes('DevTools') &&
      !error.includes('GPU') &&
      !error.includes('font')) {
    console.error('‚ùå Error:', error.trim());
  }
});

// Wait for app to start
setTimeout(() => {
  console.log('\nüìã Data flow test starting...\n');
  
  // Simulate typing a command
  console.log('üéÆ Simulating user input: "echo test"');
  
  // Send synthetic keyboard events (this won't work directly, but will show the flow)
  appProcess.stdin.write('echo test\n');
  
  // Wait for processing
  setTimeout(() => {
    console.log('\nüìä Analysis:\n');
    
    // Check for key events in the flow
    const flowChecks = [
      { pattern: /WorkingPty.*Starting terminal/, name: 'PTY Started' },
      { pattern: /WorkingPty.*Received input/, name: 'Input Received by PTY' },
      { pattern: /WorkingPty.*Output received/, name: 'Output Generated by PTY' },
      { pattern: /PtyService.*WorkingPty data received/, name: 'Data Received by PtyService' },
      { pattern: /DataBufferer.*write called/, name: 'DataBufferer Processing' },
      { pattern: /DataBufferer.*calling callback/, name: 'DataBufferer Callback' },
      { pattern: /PtyService.*DataBufferer callback/, name: 'PtyService Emit' },
      { pattern: /Main.*Sending PTY data to renderer/, name: 'Main->Renderer IPC' },
      { pattern: /Preload.*Received terminal:data/, name: 'Preload Received' },
      { pattern: /Renderer.*Received terminal data/, name: 'Renderer Received' },
      { pattern: /Renderer.*Writing to terminal/, name: 'Terminal Display' }
    ];
    
    console.log('Data Flow Checklist:');
    flowChecks.forEach(check => {
      const found = outputBuffer.match(check.pattern);
      console.log(`${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
      if (found) {
        console.log(`   ‚îî‚îÄ ${found[0].trim()}`);
      }
    });
    
    // Summary
    console.log('\nüìù Summary:');
    const ptyStarted = outputBuffer.includes('WorkingPty] Starting terminal');
    const inputReceived = outputBuffer.includes('WorkingPty] Received input');
    const outputGenerated = outputBuffer.includes('WorkingPty] Output received');
    const dataFlowComplete = outputBuffer.includes('Renderer] Writing to terminal');
    
    if (ptyStarted && inputReceived && outputGenerated && !dataFlowComplete) {
      console.log('‚ùå Data is generated but not reaching the renderer!');
      console.log('   Likely issue: IPC event flow is broken');
    } else if (ptyStarted && !inputReceived) {
      console.log('‚ùå PTY is not receiving input!');
      console.log('   Likely issue: Terminal input handling');
    } else if (!ptyStarted) {
      console.log('‚ùå PTY is not starting!');
      console.log('   Likely issue: Terminal creation');
    } else if (dataFlowComplete) {
      console.log('‚úÖ Data flow appears to be working!');
    }
    
    // Clean up
    setTimeout(() => {
      console.log('\nüèÅ Test complete. Closing app...');
      appProcess.kill('SIGTERM');
      
      setTimeout(() => {
        process.exit(0);
      }, 1000);
    }, 2000);
  }, 5000);
}, 5000);

// Timeout safety
setTimeout(() => {
  console.error('\n‚è±Ô∏è  Test timeout!');
  appProcess.kill('SIGTERM');
  process.exit(1);
}, 20000);